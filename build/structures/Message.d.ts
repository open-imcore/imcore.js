import { Handle } from "./Handle";
import { AnyChatItem } from "../Util";
import { Base } from "./Base";
import { AcknowledgmentChatItem } from "./AcknowledgmentChatItem";
import { AttachmentChatItem } from "./AttachmentChatItem";
import { TextChatItem } from "./TextChatItem";
import { AcknowledgableChatItem } from "./AcknowledgableChatItem";
import { StatusChatItem } from './StatusChatItem';
import { AssociatedChatItem } from './AssociatedChatItem';
import { IMService } from "../Constants";
import { AttachmentRepresentation, MessageRepresentation, AcknowledgmentType } from "imcore-ajax-core";
export declare class Message extends Base<MessageRepresentation> implements Omit<MessageRepresentation, "sender" | "subject" | "items"> {
    private _sender;
    private _subject;
    timeDelivered: number;
    timePlayed: number;
    timeRead: number;
    messageSubject?: string;
    isSOS: boolean;
    isTypingMessage: boolean;
    isCancelTypingMessage: boolean;
    isDelivered: boolean;
    isAudioMessage: boolean;
    description?: string;
    flags: number;
    id: string;
    chatID: string;
    fromMe: boolean;
    time: number;
    items: AnyChatItem[];
    service: IMService;
    fileTransferIDs: string[];
    toString(): string;
    get isTranscriptLike(): boolean;
    get attachments(): AttachmentRepresentation[];
    get textItems(): TextChatItem[];
    get attachmentItems(): AttachmentChatItem[];
    get acknowledgmentItem(): AcknowledgmentChatItem | null;
    get acknowledgmentType(): AcknowledgmentType | null;
    get acknowledgedMessage(): Message | null;
    get acknowledgedMessageItem(): AcknowledgableChatItem | null;
    get acknowledgedMessagePart(): number | null;
    get acknowledgedMessageID(): string | null;
    get associatedItems(): AssociatedChatItem[];
    get associatedIDs(): string[];
    get isAcknowledgment(): boolean;
    get isAcknowledged(): boolean;
    get date(): Date;
    get chat(): import("./Chat").Chat;
    get sender(): Handle | null;
    get subject(): Handle | null;
    get read(): boolean;
    get delivered(): boolean;
    _applyStatusItem({ flags, timeDelivered, timeRead, timePlayed }: StatusChatItem): this;
    _patch({ sender, subject, timeDelivered, timePlayed, timeRead, messageSubject, isSOS, isTypingMessage, isCancelTypingMessage, isDelivered, isAudioMessage, description, flags, items, id, chatID, fromMe, time, service, fileTransferIDs }: MessageRepresentation): this;
}
